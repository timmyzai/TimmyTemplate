syntax = "proto3";

option csharp_namespace = "ByteAwesome.SecretAPI.Grpc";

package SecretAPIGrpc;

service TfaGrpcService {
  rpc CreateOrUpdateTwoFactorAuth(CreateOrUpdateTwoFactorAuthProtoDto) returns (TwoFactorAuthProtoDto);
  rpc ValidateTwoFactorPin(ValidateTwoFactorPinProtoDto) returns (ValidateTwoFactorPinResponse);
}

message CreateOrUpdateTwoFactorAuthProtoDto {
  string user_id = 1;
  string user_name = 2;
  string languageCode = 3;  
}
message TwoFactorAuthProtoDto {
  string two_factor_secret_key = 1;
  string two_factor_qr_img_url = 2;
  string two_factor_manual_entry_key = 3;
  string error_message = 4;
}
message ValidateTwoFactorPinProtoDto {
  string user_id = 1;
  string two_factor_pin = 2;
  string languageCode = 3;
}

message ValidateTwoFactorPinResponse {
  bool success = 1;
  string error_message = 2;
}

service OtpGrpcService {
  rpc Add(CreateOtpProtoDto) returns (OtpProtoDto);
  rpc Verify(VerifyOTPProtoDto) returns (VerifyOTPResponse);
}

enum OtpProtoType {
  SMS = 0;
  Email = 1;
}

enum OtpActionProtoType {
  EmailVerification = 0;
  PhoneVerification = 1;
  ForgotPassword = 2;
  Login = 3;
}

message CreateOtpProtoDto {
  string value = 1;
  OtpProtoType type = 2;
  OtpActionProtoType action_type = 3;
  string languageCode = 4;
}

message OtpProtoDto {
  string value = 1;
  string tac_code = 2;
  OtpProtoType type = 3;
  OtpActionProtoType action_type = 4;
  string error_message = 5;
}

message VerifyOTPProtoDto {
  string value = 1;
  string tacCode = 2;
  OtpActionProtoType action_type = 3;
  string languageCode = 4;
}

message VerifyOTPResponse {
  bool success = 1;
  string error_message = 2;
}


service AccessTokenGrpcService {
  rpc GenerateAccessToken(GenerateAccessTokenProtoDto) returns (GenerateAccessTokenProtoResult);
}

message GenerateAccessTokenProtoResult {
  string encrypted_access_token = 1;
  int32 expire_in_seconds = 2;
  string error_message = 3;

}

message GenerateAccessTokenProtoDto {
  string user_id = 1;
  string user_name = 2;
  string email_address = 3;
  string phone_number = 4;
  repeated string role_names = 5;
  string languageCode = 6;
  string user_login_serssion_id = 7;
}

message DeviceInfoProtoDto {
  string deviceType = 1;
  string deviceBrand = 2;
  string deviceModel = 3;
  string os = 4;
  string browser = 5;
}

service KmsKeysGrpcService {
  rpc CreateOrUpdateKmsKeys(CreateKmsKeyProtoDto) returns (CreateKmsKeyResultDto);
  rpc VerifyDataAndDecrypt(VerifySignAndDecryptProtoDto) returns (VerifySignAndDecryptResultDto);
  rpc GetPublicKey(GetPublicKeyProtoDto) returns (GetPublicKeyResultDto);
}

message CreateKmsKeyProtoDto {
  string user_id = 1;
}
message CreateKmsKeyResultDto {
  string public_key = 1;
  string error_message = 2;
}
message VerifySignAndDecryptProtoDto {
  string user_id = 1;
  string encrypted_data = 2;
}
message VerifySignAndDecryptResultDto {
  string decrypted_data = 1;
  string error_message = 2;
}
message GetPublicKeyProtoDto {
  string user_id = 1;
}
message GetPublicKeyResultDto {
  string public_key = 1;
  string error_message = 2;
}
