syntax = "proto3";

option csharp_namespace = "SecretAPI.Grpc";

package SecretAPIGrpc;

service TfaGrpcService {
  rpc CreateOrUpdateTwoFactorAuth(CreateOrUpdateTwoFactorAuthProtoDto) returns (TwoFactorAuthProtoDto);
  rpc VerifyTwoFactorPin(VerifyTwoFactorPinProtoDto) returns (VerifyTwoFactorPinResponse);
}
message CreateOrUpdateTwoFactorAuthProtoDto {
  string user_id = 1;
  string user_name = 2;
}
message TwoFactorAuthProtoDto {
  string two_factor_secret_key = 1;
  string two_factor_qr_img_url = 2;
  string two_factor_manual_entry_key = 3;
  string error_message = 4;
}
message VerifyTwoFactorPinProtoDto {
  string user_id = 1;
  string two_factor_pin = 2;
}
message VerifyTwoFactorPinResponse {
  string error_message = 1;
}

service OtpGrpcService {
  rpc Add(CreateOtpProtoDto) returns (OtpProtoDto);
  rpc Verify(VerifyOTPProtoDto) returns (VerifyOTPResponse);
}
enum OtpProtoType {
  SMS = 0;
  Email = 1;
}
enum OtpActionProtoType {
  EmailVerification = 0;
  PhoneVerification = 1;
  ForgotPassword = 2;
  Login = 3;
}
message CreateOtpProtoDto {
  string value = 1;
  OtpProtoType type = 2;
  OtpActionProtoType action_type = 3;
}
message OtpProtoDto {
  string value = 1;
  string tac_code = 2;
  OtpProtoType type = 3;
  OtpActionProtoType action_type = 4;
  string error_message = 5;
}
message VerifyOTPProtoDto {
  string userId = 1;
  string value = 2;
  string tacCode = 3;
  OtpActionProtoType action_type = 4;
}
message VerifyOTPResponse {
  string error_message = 1;
}

service AccessTokenGrpcService {
  rpc GenerateTokensAndPublicKey(AuthenticationClaimsProtoDto) returns (GenerateTokensAndPublicKeyProtoResult);
  rpc GenerateAccessToken(AuthenticationClaimsProtoDto) returns (GenerateAccessTokenProtoResult);
}
message AuthenticationClaimsProtoDto {
  string user_id = 1;
  string user_name = 2;
  string email_address = 3;
  string phone_number = 4;
  repeated string role_names = 5;
}
message GenerateTokensAndPublicKeyProtoResult {
  string encrypted_access_token = 1;
  int32 expire_in_seconds = 2;
  string refresh_token = 3;
  string refresh_token_expire_date = 4;
  string error_message = 5;
}
message GenerateAccessTokenProtoResult {
  string encrypted_access_token = 1;
  int32 expire_in_seconds = 2;
  string error_message = 3;
}
