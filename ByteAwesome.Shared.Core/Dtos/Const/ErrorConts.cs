namespace ByteAwesome
{
    public static class ErrorCodes
    {
        public static class General
        {
            public const string HostTerminated = "1001"; //Host terminated unexpectedly
            public const string UnhandledError = "1002"; //Unhandled error.
            public const string EntityGetById = "1003"; //Exception occurred while getting entity by {id}.
            public const string EntityAdd = "1004"; //Exception occurred while adding entity.
            public const string EntityUpdate = "1005"; //Exception occurred while updating user entity.
            public const string EntityDelete = "1006"; //Exception occurred while deleting user entity.
            public const string EntityGetAll = "1007"; //Exception occurred while getting all entities.
            public const string LoadLanguages = "1008"; //Load Language Error.
            public const string DecryptString = "1009"; //Exception occurred while trying to decrypt.  
            public const string NotifyUser = "1010"; //Notify user error.
            public const string JsonDataParse = "1011";//Error parsing JSON.
            public const string PleaseLogin = "1012";//Please Login.
            public const string EntityNameNotFound = "1013";//"{typeof(TEntity).Name} not found."
            public const string RedisConnection = "1014";//Error connecting to Redis.
            public const string InvalidField = "1015";//Validation error: Please verify and correct your input according to field requirements.
            public const string Unauthorized = "1016";//"You are not authorized."
            public const string GetByUserId = "1017"; //Exception occurred while Get By User Id.
            public const string ComingSoon = "9999"; //Coming soon.
            public const string EntityAlreadyDeleted = "1018"; //"{typeof(TEntity).Name} already deleted."
            public const string ConfigNotFound = "1019"; //Please setup {name} in config settings.
            public const string EncryptString = "1009"; //Exception occurred while trying to encrypt.  
        }
        public static class User
        {
            public const string RoleAlreadyExists = "U1001"; //Role already exists. 
            public const string RoleCreationFailed = "U1002";//Exception occured while adding new Role.
            public const string GetMyKycError = "U1003"; //Failed to retrieve my KYC info.
            public const string UserGetById = "U1004"; //Exception occurred while getting user by id - {id}.
            public const string UserAddFailed = "U1005"; //Failed to add user.
            public const string UserNotExists = "U1006"; //User does not exist.
            public const string UserLoginFailed = "U1007"; //User login failed.
            public const string TwoFactorAlreadyEnabled = "U1008"; //Two factor authentication is already enabled.
            // public const string GetBySessionHash = "U1009"; //Failed to get user session by session hash.
            public const string UserGetAllFailed = "U1010"; //Failed to get all users.
            public const string SendConfirmationEmail = "U1011"; //Failed to send confirmation email. 
            public const string InvalidUserLoginIdentity = "U1012"; //Invalid user login identity.
            public const string UserIsNotActive = "U1013"; //User is not active.
            public const string UserLockedOut = "U1014"; //User is locked out.
            public const string InvalidPassword = "U1015"; //Invalid password.
            public const string RequireOtpToVerifyEmail = "U1016"; //Email is not verified. OTP code required.
            public const string RequireTwoFactorPin = "U1017"; //Two factor authentication pin required.
            public const string RequireLoginOtp = "U1018"; //Login OTP code required.
            public const string GetMyUserInfo = "U1019"; //Failed to retrieve my user info.
            public const string GetUserInfoByUserIdentity = "U1020"; //Failed to retrieve user info by login identity.
            public const string UserNewPasswordNotMatch = "U1021"; //New password does not match with confirm password.
            public const string ChangeUserPassword = "U1022"; //Exception occurred while changing user password.
            public const string UpdateUserProfile = "U1023"; //Exception occurred while updating user details.
            public const string UserLogoutFailed = "U1024"; //User logout failed.
            public const string UpdateUserPhoneNumber = "U1025"; //Exception occurred while updating phone number.
            public const string GetTwoFactorAuthInfo = "U1026"; //Exception occurred while getting two factor authentication info.
            public const string EnableOrDisableTwoFactorAuth = "U1027"; //Exception occurred while enable or disable two factor authentication info.
            public const string DeleteMyAccount = "U1028"; //Exception occurred while deleting user account. 
            public const string SendLoginOtpEmail = "U1029"; //Error sending login OTP email.
            public const string SendConfirmationPhone = "U1030"; //Error while sending the phone number TAC Code.
            public const string VerifyPhoneNumber = "U1031"; //Error while verifying phone number.
            public const string SendForgotPasswordEmail = "U1032"; //Error sending forgot password email.
            public const string ChangeUserPasswordByEmail = "U1033"; //Error while changing user password by email
            public const string GenerateAccessToken = "U1034"; //Error occurs in AccessToken GRPC server. Message: 
            public const string DecryptString = "U1035"; //Error while Decrypting.
            public const string GetMyUserLoginSessions = "U1036"; //Error while getting my user login sessions.
            // public const string SendSMS = "U1037"; //Send SMS Failed. 
            public const string SaveChangesAsyncCalled = "U1038"; //SaveChanges has already been called."
            public const string SaveChangesAsync = "U1039"; //Error saving changes 
            public const string Dispose = "U1040";//Error disposing changes
            public const string GetRoleByName = "U1041";//Exception occurred while trying to getrole by name//User with role {name} not Exists.
            public const string UserWithoutPhone = "U1042";//Current user does not have a phone number!
            // public const string UserPhoneNotMatch = "U1043";//Phone number does not match with the current phone number!"
            public const string IdentityTypeAlreadyExists = "U1044"; //User already exists. 
            public const string OTPError = "U1045"; //OTP Error. 
            public const string PhoneAlreadyVerified = "U1046"; //Phone number was already verified.
            public const string GetUserRoleByUser = "U1047"; //Exception occurred while getting user role by user.
            public const string UserGrpcError = "U1048"; //User Grpc error. 
            public const string GetKycAccessTokenError = "U1049"; //Error getting kyc access token.
        }
        public static class Secret
        {
            public const string GenerateAccessToken = "S1001"; //Generate Access Token failed. 
            public const string CreateAccessToken = "S1002";//Create access token failed.
            public const string CreateJwtClaims = "S1003"; //Create Jwt claims failed. 
            public const string CreateOrUpdateOtp = "S1004"; //Could not create or update OTP.
            public const string VerifyOTP = "S1005"; //OTP verification failed. 
            public const string OTPGetAll = "S1006"; //Get all OTPs failed.
            public const string InvalidOTP = "S1007"; //Invalid OTP.
            public const string ExpiredOTP = "S1008"; //OTP expired.
            public const string UsedOTP = "S1009"; //OTP already used.
            public const string CreateOrUpdateTFA = "S1010"; //Could not create or update existing two factor authentication.
            public const string CreateOrUpdateKmsKeys = "S1011"; //Failed to create Or update KMS keys.
            public const string InvalidTFPin = "S1012"; //Invalid two factor authentication pin.
            public const string OTPNotFound = "S1013"; //OTP not found for user. Please request for OTP.
            public const string GetValidOtpByValue = "S1014"; //Exception occurred while Get Valid OTP By Value.
            public const string VerifyDataAndDecrypt = "S1015"; //Failed to verify signature and decrypt data.
            public const string OTPAlreadyRequested = "S1016"; //OTP Already Requested Within 60 seconds.
            public const string TFANotFound = "S1017"; //Two factor authentication info not found for user. Please request for two factor authentication.
            public const string KmsKeysNotFound = "S1018"; //Please request for KMS keys.
        }
        public static class Wallet
        {
            public const string WalletGroupNotFound = "W1001"; // Cannot find wallet group.
            public const string KmsGrpcError = "W1002"; // Error occurred in KMS GRPC server.
            public const string WalletAlreadyMultiSign = "W1003"; // Wallet group with id {0} is a multisign wallet already.
            public const string RepeatedMspUserIds = "W1004"; // MspUsers cannot have repeated user ids.
            public const string PaymentRequired = "W1005"; //"Payment required when {actionName}.";
            public const string MinMspUserCount = "W1006"; // MspUsers and SobUsers must be at least 2.
            public const string MinApprovalsHeadCount = "W1007"; // MspApprovalsHeadCount and SobApprovalsHeadCount must be at least 2.
            public const string InvalidMspUser = "W1008"; // Invalid msp user {0}. This user does not exist in the system.
            // public const string UnauthorizedAccessGeneral = "W1009"; // Unauthorized access.
            // public const string WalletAlreadyConfigured = "W1010"; // Wallet already configured as multisign.=
            public const string WpUsersRepeatedIds = "W1011"; // WpUsers cannot have repeated user ids.
            public const string WpUsersContainsCurrentUserId = "W1012"; // WpUsers must contain the current user id.
            public const string WpUsersContainsDelegateUserId = "W1013"; // WpUsers cannot contain the delegate user id.
            public const string DelegateChangeNotAllowed = "W1014"; // You are not allowed to change delegate user.
            public const string MspMissingCurrentUser = "W1015"; // MspUsers must contain the current user id.
            public const string MultiSignWalletNotFound = "W1016"; // Cannot find multi sign wallet.
            public const string UsersAlreadyInList = "W1017"; // One or more users are already in the list.
            public const string RepeatedSobUserIds = "W1018"; // SobUsers cannot have repeated user ids.
            public const string SobUsersContainCurrentUser = "W1019"; // SobUsers cannot contain the current user id.
            public const string MinSobUserCount = "W1020"; // SobUsers must be at least 2.
            public const string MinSobApprovalsHeadCount = "W1021"; // SobApprovalsHeadCount must be at least 2.
            public const string MinSobTriggerWaitingTime = "W1022"; // SobTriggerWaitingTime must be at least 60 seconds.
            public const string InvalidSobUser = "W1023"; // Invalid sob user {0}. This user does not exist in the system.
            public const string PaymentRequiredAddSobToMsp = "W1024"; // Payment required when AddOrUpdateSobUserToMsp.
            // public const string AddOrUpdateSobUserToMspFailed = "W1025"; // Exception occurred while AddOrUpdateSobUserToMsp.
            // public const string GetMultiSignPolicyByWalletGroupIdFailed = "W1026"; // Exception occurred while GetMultiSignPolicyByWalletGroupId.
            public const string PaymentOrderNotFound = "W1027"; // Payment order not found.
            public const string PaymentOrderNotPending = "W1028"; // Payment order is not in pending status.
            public const string ProceedPaymentOrderFailed = "W1029"; // Failed to proceed payment order.
            public const string WalletBalanceNotEnough = "W1030"; // Wallet balance is not enough.
            public const string MultiSignInfoNotFound = "W1031"; // MultiSign info not found.
            // public const string WalletGroupInBetweenTransferNotAllowed = "W1032"; // Wallet group in-between transfer is not allowed.
            // public const string SenderAndReceiverMustBelongToSameOwner = "W1033"; // Sender and receiver must belong to the same owner.
            // public const string FailedDueToNegativeBalance = "W1034"; // Failed due to negative balance.
            // public const string TransferTargetAddressRequired = "W1035"; // Transfer target address is required.
            public const string SymbolNotFound = "W1036"; // Cannot find symbols.
            public const string InvalidDecimalPlaces = "W1037"; // Amount with invalid decimal places.
            public const string ExceedMinTransferAmount = "W1038"; // Exceed minimum transfer amount.
            public const string ExceedMaxTransferAmount = "W1039"; // Exceed maximum transfer amount.
            public const string TransactionNotFound = "W1040"; // Transaction not found.
            public const string PendingMultiSignApproval = "W1041"; // Transaction status is not pending Multi Sign approval.
            public const string NotMultiSignAction = "W1042"; // Transaction action is not Multi Sign.
            public const string Authorization = "W1043"; // You are not authorized.
            public const string UserAlreadyApproved = "W1044"; // User already approved.
            public const string UserAlreadyRejected = "W1045"; // User already rejected.
            public const string NegativeBalance = "W1046"; // Failed because of negative balance.
            public const string ContractAddressNotFound = "W1047"; // Cannot find contract address.
            // public const string CoSignTransferFailed = "W1048"; // Failed to execute co-sign transfer. Please check CoSign Transfer GRPC.
            public const string TransferFailedDueToSameAddress = "W1049"; // Cannot transfer to the same wallet address.
            public const string InactivePolicy = "W1050"; // Wallet Policy is not active.
            public const string AddressRequired = "W1051"; // Address is required.
            public const string RegexNotFound = "W1052"; // Cannot find regex.
            public const string InvalidAddressFormat = "W1053"; // Invalid address format.
            public const string MultiSignWalletSymbolNotFound = "W1054"; // Cannot find {symbol} in WalletGroup.
            public const string DayLimitConfigNotFound = "W1055"; // Cannot find transfer day limit config.
            public const string ExceedDayLimit = "W1056"; // Exceed day limit.
            public const string HugeAmountConfig = "W1057"; // Please config HugeAmountHoldingValue.
            public const string TransferNotAllowed = "W1058"; // Not allow to transfer. Transfer disabled.
            public const string TransactionNotPendingApproval = "W1059"; // Transaction status is not pending approval.
            public const string UserNotFound = "W1060"; // "User not found."
            public const string UserHighestRank = "W1061"; // "User already has the highest rank."
            public const string VaultNotFound = "W1062"; // "Cannot find vault"
            // public const string WalletDelegationNotFound = "W1063"; // "Cannot find wallet to be delegated"
            public const string OwnerAssetNotFound = "W1064"; // "Cannot find ownerAsset"
            public const string InvalidPercentageSum = "W1065"; // "Sum of percentages must be 100%"
            public const string DuplicateWalletGroup = "W1066"; // "Cannot set the same wallet group as Vault and Auto Transfer Target at the same time"
            public const string DuplicateAttWalletGroupIds = "W1067"; // "Duplicate AttWalletGroupId values found: {string.Join(", ", duplicateAttWalletGroupIds)}"
            public const string InvalidAttWalletGroupSelection = "W1068"; // "Can select your own wallet group as ATT only"
            public const string InvalidVaultWalletGroup = "W1069"; // "Invalid Wallet group with id {vaultWalletGroupId} is a vault"
            public const string InvalidAttVaultWalletGroup = "W1070"; // "Invalid ATT Wallet group with id {att.AttWalletGroupId} is a vault"
            // public const string CanNotFindWalletGroup = "W1071"; // "Cannot find wallet group to set as vault."
            // public const string Unauthorized = "W1072"; // "You are not authorized."
            // public const string DuplicateWalletGroups = "W1073"; // "Duplicate WalletGroupsIds found: {duplicateIdsString}"
            // public const string AllIdsExistInCurrentCategory = "W1074"; // "Input wallet group Ids are all existed in current category {existingCategory.Name}."
            // public const string WalletExists = "W1075"; // "{existingWallet.WalletData.Network} wallet exists."
            public const string WalletNotFound = "W1076"; // "Cannot find wallet"
            public const string NetworkNotFound = "W1076"; // "Cannot find Network"
            public const string CustomWalletExists = "W1077"; // "Custo Wallet existed"
            public const string FailedToAddCustomWallet = "W1078"; // "Include error message in the translation for {FailedToAddCustomWallet} error."
            // public const string PaymentRequiredAction = "W1079"; // "Payment required when {actionName}"
            public const string MspUsersRepeatedIds = "W1080"; // "MspUsers cannot have repeated user ids. Repeated IDs: {repeatedIds}"
            public const string MspUsersMissingCurrentUserId = "W1081"; // "MspUsers must contain the current user id"
            public const string MspUsersMinimumCount = "W1082"; // "MspUsers must be at least 2"
            public const string MspApprovalsHeadCountMinimum = "W1083"; // "MspApprovalsHeadCount must be at least 2"
            public const string MspApprovalsHeadCountExceedsUserCount = "W1084"; // "MspApprovalsHeadCount must be less or equal to Msp User"
            // public const string WalletGroupNotFoundDelegation = "W1085"; // "Cannot find wallet group with this Id"
            public const string DelegateUserAlreadyHasPolicy = "W1086"; // "Delegate user already has an existing wallet policy"
            public const string InvalidDelegateUserNotExists = "W1087"; // "Invalid delegate user. The user does not exist"
            public const string InvalidDelegateUserOwner = "W1087"; // "Invalid delegate user. The user same as owner"
            public const string WalletPolicyNotFound = "W1088"; // "Cannot find wallet policy"
            public const string WalletNotFoundForDelegation = "W1089"; // "Cannot find wallet to be delegated"
            public const string WalletPolicyNotFoundWithPendingStatus = "W1090"; // "Cannot find wallet policy with Pending status"
            public const string WalletPolicyInvalid = "W1091"; // "Invalid wallet policy. Please check the wallet policy status."
            public const string ExternalApiImportError = "W1092"; // "Failed to import price from external API. Error message: {information}"
            // public const string ExternalApiError = "W1093"; // "Failed to import price from external API"
            public const string DuplicateSymbolsDetected = "W1094"; // "Duplicate symbols detected"
            public const string DuplicateAddressDetected = "W1095"; // "Duplicate address detected"
            public const string InvalidCryptocurrencyAddressCharacters = "W1096"; // "Invalid cryptocurrency address characters"
            // public const string LevainUnhandledError = "W1097"; // "Levain Unhandled error."
            public const string LevainWalletAddressNotFound = "W1098"; // "Levain Wallet address not found."
            // public const string LevainCustoWalletNotFound = "W1099"; // "Levain custo wallet not found."
            public const string LevainTransactionNotFound = "W1100"; // "Levain Transaction not found."
            // public const string MockCustoWalletUnhandledError = "W1101"; // "Unhandled error in MockCustoWallet."
            public const string MockCustoWalletNotFound = "W1102"; // "Wallet not found in MockCustoWallet."
            public const string CoSignClientTransferError = "W1103"; // "Error occurred while transferring in CoSignClient."
            public const string CoSignClientNoResponse = "W1104"; // "No response received from the server. in CoSignClient."
            public const string TfaGrpcError = "W1105"; // "Error occurs in Tfa GRPC server in TfaGrpcClient."
            // public const string TfaGrpcResponseError = "W1106"; // "Error in Tfa GRPC response in TfaGrpcClient."
            // public const string CommisionManagerNegativeBalance = "W1107"; // "Failed because of negative balance in CommisionManager."
            public const string CommisionManagerAdminWalletGroupIdError = "W1108"; // "Please config AdminWalletGroupId in CommisionManager. Must be a valid Guid."
            // public const string CommisionManagerUnhandledError = "W1109"; // "Unhandled error in CommisionManager."
            public const string CurrentUnitOfWorkSaveError = "W1110"; // "Error saving changes in CurrentUnitOfWork."
            public const string CurrentUnitOfWorkDisposeError = "W1111"; // "Error disposing changes in CurrentUnitOfWork."
            // public const string CurrentSessionLoginError = "W1112"; // "Please login in CurrentSession."
            // public const string DecodeServiceError = "W1113"; // "Exception occurred while trying to decrypt in DecodeService."
            // public const string BalanceManagementsUnhandledError = "W1114"; // "Unhandled error in BalanceManagements."
            // public const string BalanceManagementsNoSymbolDetected = "W1115"; // "No symbol is detected in BalanceManagements."
            public const string BalanceManagementsInvalidSymbol = "W1116"; // "Invalid symbol. Symbol may be inactive in BalanceManagements."
            // public const string AssetsRepositoryUnhandledError = "W1117"; // "Unhandled error in AssetsRepository."
            // public const string ChainlessSymbolsRepositoryUnhandledError = "W1118"; // "Unhandled error in ChainlessSymbolsRepository."
            // public const string LevainBalanceUpdateRepositoryUnhandledError = "W1119"; // "Unhandled error in LevainBalanceUpdateRepository."
            // public const string MultiSignPolicyRepositoryUnhandledError = "W1120"; // "Unhandled error in MultiSignPolicyRepository."
            public const string MultiSignPolicyNotFound = "W1121"; // "MultiSignPolicy not found in MultiSignPolicyRepository."
            // public const string NetworksRepositoryUnhandledError = "W1122"; // "Unhandled error in NetworksRepository."
            // public const string SymbolsRepositoryUnhandledError = "W1123"; // "Unhandled error in SymbolsRepository."
            // public const string TransactionsRepositoryUnhandledError = "W1124"; // "Unhandled error in TransactionsRepository."
            // public const string TransactionsNotFound = "W1125"; // "Transactions not found in TransactionsRepository."
            // public const string UserBasicInfoRepositoryUnhandledError = "W1126"; // "Unhandled error in UserBasicInfoRepository."
            // public const string VaultRepositoryUnhandledError = "W1127"; // "Unhandled error in VaultRepository."
            // public const string WalletGroupRepositoryUnhandledError = "W1128"; // "Unhandled error in WalletGroupRepository."
            // public const string WalletPolicyRepositoryUnhandledError = "W1129"; // "Unhandled error in WalletPolicyRepository."
            // public const string WalletRepositoryUnhandledError = "W1130"; // "Unhandled error in WalletRepository."
            public const string InvalidPaymentOrderActionType = "W1131"; //Invalid payment order action type
            public const string GetWalletGroupCategories = "W1132"; //"Exception occurred while Getting WalletGroupCategories."
            public const string AddWalletGrouptoCategory = "W1133"; //"Exception occurred while Adding WalletGroup to category."
            public const string CategoryNotFound = "W1134"; //"Category with {input.CategoryId} does not exist.
            public const string WalletGroupIDsNotExists = "W1135"; //"The following IDs are not existed: {notExistedIdsString} in WalletGroups.
            public const string DuplicateWalletGroupIDs = "W1136"; //"Duplicate WalletGroupsIds found: {duplicateIdsString}"
            public const string RemoveWalletGroupFromCategory = "W1137"; //"Exception occurred while Removing WalletGroup from category." 
            public const string WalletGroupNotExistedInCategory = "W1138"; //"The following IDs are not existed: {commonIdsString} in current category {existingCategory.Name}s"
            public const string CreateWalletGroupCategory = "W1139"; //"Exception occurred while creating WalletGroupcategory."
            public const string UpdateWalletGroupCategory = "W1140"; //"Exception occurred while updating WalletGroupcategory."
            public const string DeleteWalletGroupCategory = "W1141"; //"Exception occurred while deleting WalletGroupcategory."
            public const string DelegationPolicyInactive = "W1142"; //"Delegation policy is inactive."
            // public const string CreateUserWalletFailed = "W1143"; //"Failed to CreateUserWallet. Error code: {errorResponse.error_code}, Message: {errorResponse.error_description}."
            // public const string SignatureorPublicKeyNull = "W1144"; //Signature or public key is null.
            // public const string AddChainToWalletFailed = "W1145"; //"Failed to AddChainToWallet. Error code: {errorResponse.Code}, Message: {errorResponse.Message}."
            // public const string TransferFromWalletFailed = "W1146"; //"Failed to TransferFromWallet. Error code: {errorResponse.Code}, Message: {errorResponse.Message}."
            // public const string GetallWalletsFailed = "W1147"; //"Failed to GetallWallets. Error code: {errorResponse.Code}, Message: {errorResponse.Message}."
            // public const string GetTxRecordFailed = "W1148"; //"Failed to GetTxRecord. Error code: {errorResponse.Code}, Message: {errorResponse.Message}."
            // public const string UserWalletFailed = "W1149"; //"UserWallet failed. Error code: {errorResponse.Code}, Message: {errorResponse.Message}."
            public const string GraphqlReadfailed = "W1150"; //"Cannot read Graphql file.";
            public const string QueryMutationNotFound = "W1151"; //"Query/Mutation not found.";
            public const string WalletGroupTagNotFound = "W1152"; //"Tag with {input.TagId} does not exist."
            public const string WalletGroupCommonIdsNotExist = "W1153"; //"The following IDs are not existed: {commonIdsString} in current tag {existingTag.Name}"
            public const string WalletGroupDuplicateWalletGroupsIds = "W1154"; //"Duplicate WalletGroupsIds found: {duplicateIdsString}"
            public const string InvalidDelegateUser = "W1155"; //"Invalid delegate user. The user is not exist".
            public const string InvalidExpiryDate = "W1156"; //"Invalid Expiry Date."
            public const string TransferLimitsRequired = "W1157"; //"Transfer Limit is required."
            public const string TransferLimitInvalid = "W1158"; //"Transfer limit must be greater than or equal to 0."
            public const string InvalidCryptocurrencyAddressLength = "W1159"; //"Invalid Crypto currency Address Length."
            // public const string MspUsersContainsCurrentUserId = "W1160"; //"MspUsers cannot contain the current user id."
            // public const string MspUsersContainsDelegateUserId = "W1161"; //"MspUsers cannot contain the delegate user id."
            public const string ExpiryDateMinimumOneDay = "W1162"; //"Expiry date must be at least 1 day."
            public const string WalletGroupExistedInCategory = "W1163"; //$"Input wallet group Ids are all existed in current category {existingCategory.Name}."
            // public const string CoSignTransferFailedNoTxId = "W1164"; // Failed to execute co-sign transfer, can not get Tx Id. Please check CoSign Transfer GRPC.
            public const string RequirementMinSobApprovalHeadCount = "W1165"; // Minimum Sob Approvals HeadCount did not meet the requirement set by Main Owner..
            public const string RequirementMinTotalNumberOfSob = "W1166"; // Minimum Total Number Of Sob did not meet the requirement set by Main Owner.
            public const string NotAllowToTransferMspRequirementNotFulfilled = "W1167"; // Transfer not allowed. {0}  MspUsers didn't meet Sob requirement (Min Sob Approval: {0}, Min Total Sob: {1}). They are: {2}.
            public const string CurrentUserNotAllowToTransferMspRequirementNotFulfilled = "W1168"; // Transfer not allowed.You didn't meet Sob requirement (Min Sob Approval: {0}, Min Total Sob: {1}).
            public const string TransactionNotPendingCosignGrpc = "W1169"; // Transaction status is not pending cosign approval.
            // public const string NotAllowTransferMultiSignPendingTransaction = "W1170"; // Not allow to transfer. There is a pending multi sign transaction.
            public const string InvalidCallBackId = "W1171"; // Invalid CallBackId from Cosign GRPC.
            public const string VaultAttWalletGroup = "W1172"; // Wallet group with id {input.WalletGroupsId.Value} is a vault auto transfer target
            public const string Vault_InvalidAmount = "W1173"; // "{input.Symbol} RemainAmount must be less than Threshold."
            public const string DuplicateAsset = "W1174"; // "Current wallet group has {input.Symbol} asset already"
            public const string SameWalletGroupTransferFailed = "W1175"; // Cannot transfer to the same wallet group.
            // public const string RefundFailed = "W1176"; // Failed to proceed refund. Please contact customer service.
            public const string CustoWalletTypeConfig = "W1177"; // "Please config CustoWalletType"
            public const string UserNoNetworkWallet = "W1178"; // User does not have {input.Network} wallet
            public const string CannotDeleteMainWalletGroup = "W1179"; // Cannot delete main, multi sign and vault wallet.
            public const string DifferentCallBackTransactionId = "W1180"; // Different CallBackTransactionId from Cosign GRPC.
            public const string InvalidAmount = "W1181"; // Invalid Amount
            public const string UserTransferLimitNotFound = "W1182"; // Can not find user transfer limit.
            public const string CanNotInputSelf = "W1183"; // Can not input your self.
            public const string SameTransferDestination = "W1184"; // Can not transfer to the same wallet.
            public const string PleaseCreateFirstWalletGroup = "W1185"; // Please create first wallet.
            // public const string TransferTargerIdentityRequired = "W1186"; // Transfer target is required.
            // public const string OnlyAllowOneTarget = "W1187"; // Only allow one transfer target.
        }
        public static class Notification
        {
            public const string GetMyNotifySettings = "N1001"; //Get user notify settings error. 
            public const string UpdateMyNotifySettings = "N1002"; //Update user notify settings error. 
            public const string SendEmail = "N1003"; //Send Email failed.
            public const string SendSMS = "N1004"; //Send SMS failed. 
            public const string RegisterUserSocket = "N1005"; //Register user socket failed.
            public const string DeleteUserSocket = "N1006"; //Delete user socket failed.
            public const string GetMyNotifyInbox = "N1007"; //Failed to get my message inbox.
            public const string AddSaveUserNotifySetting = "N1008"; //Add user socket failed.
            public const string UpdateMyMessage = "N1009"; //Failed to update my message.
            public const string NotisGrpcError = "N1010"; //Notis Grpc error. 
            public const string UserNotifySettingAlreadyExists = "N1011"; //User notify settings already exists for the user. 
            public const string UserDeviceNotFound = "N1012"; //User device not found.
            public const string UserMessageNotFound = "N1013"; //User message inbox is empty.
        }
        public static class Campaign
        {
            public const string CampaignNotFound = "CP1001"; //Campaign not found.
            public const string NotActive = "CP1002"; //Campaign not active.
            public const string NotStarted = "CP1003"; //Campaign not started.
            public const string Ended = "CP1004"; //Campaign ended.
            public const string UserAlreadyClaimed = "CP1005"; //You have already claimed this Campaign.
            public const string GetCampaignClaimLink = "CP1006"; //Error while Get Campaign with claim link.
            public const string InvalidSession = "CP1007"; //Invalid Session.
            public const string SessionExpired = "CP1008"; //Session has expired.
            public const string GetAllCampaigns = "CP1009"; //Error while getting all Campaigns.
            public const string MoneyPoolLessThanZero = "CP1010"; //"Money pool must be greater than 0."
            public const string MaxAmountLessThanZero = "CP1011"; //"Max amount must be greater than 0."
            public const string MinGreaterThanMax = "CP1012"; //"Min amount must be less than max amount."
            public const string MinGreaterThanPool = "CP1013"; //"Min amount must be less than money pool."
            public const string MoneyPoolLessThanMax = "CP1014"; //"Max amount must be less than money pool."
            public const string DecimalPlacesLessthanZero = "CP1015"; //"Decimal places must be greater than or equal to 0."
            public const string MinAmountLessThanZero = "CP1016"; //"Min amount must be greater than 0."
            public const string StartDateGreaterThanEndDate = "CP1017"; //"End date must be after the start date."
            public const string ReclaimCoolDownDaysLessThanZero = "CP1018"; //"Reclaim cool down days must be greater than 0."
            public const string ReclaimCoolDownDaysNotFound = "CP1019"; //"Reclaim cool down days is required."
            public const string ReclaimCoolDownDaysMustNull = "CP1020"; //"It is not reclaimable campaign, reclaim cool down days must be null."
            public const string RewardNotFound = "CP1021"; //Reward not found.
            public const string GetCampaignById = "CP1022"; //Error while getting campaign by {id}.
        }
    }

}
